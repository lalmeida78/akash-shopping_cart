openapi: 3.0.0
info:
  title: Shopping Cart API
  description: Shopping Cart Rest Services
  version: 1.0.0

tags:
  - name: UserShoppingCart
    description: Everything about your Shopping Cart
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: ShoppingCart
    description: Everything about your Shopping Cart
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
paths:
  /carts:
    get:
      summary: List of  carts
      tags:
        - ShoppingCart
      operationId: getAllCarts
      parameters:
        - name: userId
          in: query
          required: false
          schema:
            type: string
        - name: cartId
          in: query
          required: false
          schema:
            type: string
        - name: createdAfter
          in: query
          required: false
          schema:
            type: string
            format: 'date-time'
      responses:
        '200':    # status code
          description: 'Cart detail for the given user.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        '404':
          description: 'There is  no cart available for given user.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Error on server while processing the request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/{userId}/cart:
    get:
      summary: Returns a list of carts for  given owner.
      description: Returns the list of cart for given owner and  also this API  have  the support for  filter based on the different criteria
      tags:
        - UserShoppingCart
      operationId: getCarts
      parameters:
        - name: userId
          in: path
          required: true
          description: owner id for which we need to retrieve the cart
          schema:
            type: string
      responses:
        '200':    # status code
          description: 'Cart detail for the given user.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        '404':
          description: 'There is  no cart available for given user.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Error on server while processing the request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a cart for given customer.
      description: API to create the cart for given customer.
      tags:
        - UserShoppingCart
      operationId: createCart
      parameters:
        - name: userId
          in: path
          required: true
          description: owner id for which we need to retrieve the cart
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
      responses:
        '201':    # status code
          description: 'Cart created.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '500':
          description: 'Error on server while processing the request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: delete a cart.
      tags:
        - UserShoppingCart
      operationId: deleteCartForOwner
      parameters:
        - name: userId
          in: path
          required: true
          description: owner id for which we need to retrieve the cart
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '500':
          description: Invalid owner id

  /user/{userId}/cart/{cartId}/item:
    post:
      summary: add item in cart
      tags:
        - UserShoppingCart
      operationId: addItemInCart
      parameters:
        - name: userId
          in: path
          required: true
          description: owner id for which we need to retrieve the cart
          schema:
            type: string
        - name: cartId
          in: path
          required: true
          description: cartId id for which we need to retrieve the cart
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        '200':
          description: successful operation
        '500':
          description: Error
  /user/{userId}/cart/{cartId}/item/{itemId}:
    delete:
      summary: delete item in cart
      tags:
        - UserShoppingCart
      operationId: deleteItemInCart
      parameters:
        - name: userId
          in: path
          required: true
          description: user id
          schema:
            type: string
        - name: cartId
          in: path
          required: true
          description: owner id
          schema:
            type: string
        - name: itemId
          in: path
          required: true
          description: item id for
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '500':
          description: error
    put:
      summary: update item in cart
      tags:
        - UserShoppingCart
      operationId: updateItemInCart
      parameters:
        - name: userId
          in: path
          required: true
          description: owner id
          schema:
            type: string
        - name: cartId
          in: path
          required: true
          description: Cart id
          schema:
            type: string
        - name: itemId
          in: path
          required: true
          description: item id for
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        '200':
          description: successful operation
        '500':
          description: error

components:
  schemas:
    Cart:
      type: object
      properties:
        userId:
          type: string
          description: Id of owner
          example: '1001'
        status:
          type: string
          enum:
            - AVAILABLE
            - EXPIRED
        creationDate:
          type: string
          format: 'date-time'
        address:
          type: string
        price:
          type: number
          multipleOf: 0.01
        items:
          type: array
          example: 'Check out items'
          items:
            $ref: '#/components/schemas/CartItem'
        id:
          type: string
          example: "C0010"
        checksum:
          type: string
          format: byte
      required:
        - address
        - items
    CartItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: 'Keybord'
        description:
          type: string
          example: 'Computer/Laptop accessories'
        price:
          type: number
          multipleOf: 0.01
        quantity:
          type: integer
          example: '2'
      required:
        - name
        - description
        - price
        - quantity
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string




